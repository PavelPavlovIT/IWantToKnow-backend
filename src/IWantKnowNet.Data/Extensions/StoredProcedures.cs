using Microsoft.EntityFrameworkCore.Migrations.Operations.Builders;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IWantKnowNet.Data.Extensions
{
    public static class StoredProcedures
    {
        public static OperationBuilder<SqlOperation> AddQuestionAndOneCorrectAnswer(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `AddQuestionAndOneCorrectAnswer`(\r\n\tIN KeyS3 varchar(50),\r\n\tIN ExpiredSignedUrlS3 datetime,\r\n\tIN SignedUrlS3 varchar(1000),\r\n\r\n\tIN TitleEn varchar(500),\r\n\tIN TitleEs varchar(500),\r\n\tIN TitleRu varchar(500),\r\n    IN ProofUrlEn varchar(1000),\r\n\tIN ProofUrlEs varchar(1000),\r\n\tIN ProofUrlRu varchar(1000),\r\n    IN CategoryId varchar(255),\r\n    IN UserId varchar(255),\r\n\r\n\tIN TitleCorrectAnswerEn nvarchar(500),\r\n\tIN TitleCorrectAnswerEs nvarchar(500),\r\n\tIN TitleCorrectAnswerRu nvarchar(500),\r\n\tIN isTerm int,\r\n\tINOUT Message nvarchar(1000) \r\n)\r\nBEGIN\r\n    \r\n    SET @Id = 'empty';\r\n    SET @QuestionId = UUID();\r\n    SET @ExistQuestionId = 'empty';\r\n    SET @ExistCorrectAnswerId = 'empty';\r\n    SET @TextMessage = 'Not completed';\r\n    \r\n    START TRANSACTION;\r\n    \r\n    SET @TextMessage = 'Completed';\r\n    \r\n\tSELECT t1.Id FROM Questions AS t1 \r\n\t\tWHERE  t1.TitleEn=TitleEn OR t1.TitleEs=TitleEs OR t1.TitleRu=TitleRu INTO @ExistQuestionId;\r\n    \r\n\tIF @ExistQuestionId='empty' THEN \r\n\t\tBEGIN\r\n\t\t\tINSERT INTO Questions(Id, isTerm, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, ProofUrlRu, CreaterId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3)\r\n\t\t\tVALUES (@QuestionId, isTerm, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, ProofUrlRu, UserId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3);                \r\n                \r\n\t\t\tINSERT INTO CategoryAndQuestions (Id, CategoryId, QuestionId)\r\n\t\t\tVALUES (uuid(), CategoryId, @QuestionId);\r\n        END;\r\n    ELSE \r\n\t\tBEGIN\r\n\t\t\tSET @QuestionId = @ExistQuestionId;\r\n\t\t\tSELECT t1.Id FROM CategoryAndQuestions AS t1 \r\n\t\t\t\tWHERE  t1.CategoryId=CategoryId AND t1.QuestionId=@QuestionId INTO @Id;\r\n                \r\n\t\t\tIF @Id='empty' THEN \r\n\t\t\t\tBEGIN\r\n           \t\t\tINSERT INTO CategoryAndQuestions (Id, CategoryId, QuestionId)\r\n\t\t\t\t\tVALUES (uuid(), CategoryId, @QuestionId);\r\n\t\t\t\tEND;\r\n\t\t\tELSE\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @TextMessage = 'CategoryAndQuestions found for CategoryId='+ CategoryId + ' QuestionId=' + @QuestionId;\r\n                END;\r\n\t\t\tEND IF;\r\n\t\tEND;\r\n    END IF;\r\n    \r\n    SELECT t1.Id FROM CorrectAnswers t1 \r\n\t\tWHERE  t1.TitleEn=TitleCorrectAnswerEn OR t1.TitleEs=TitleCorrectAnswerEs OR t1.TitleRu=TitleCorrectAnswerRu INTO @ExistCorrectAnswerId;\r\n    \r\n    IF @ExistCorrectAnswerId ='empty' THEN \r\n\t\tBEGIN\r\n\t\t\tSET @CorrectAnswerId = UUID();\r\n            \r\n\t\t\tINSERT INTO CorrectAnswers (Id, isTerm, TitleEn, TitleEs, TitleRu, CreaterId)\r\n\t\t\tVALUES (@CorrectAnswerId, isTerm, TitleCorrectAnswerEn, TitleCorrectAnswerEs, TitleCorrectAnswerRu, UserId);\r\n\r\n\t\t\tINSERT INTO QuestionsAndCorrectAnswers (Id, QuestionId, CorrectAnswerId)\r\n\t\t\tVALUES (UUID(), @QuestionId, @CorrectAnswerId);\r\n        END;\r\n    ELSE \r\n\t\tBEGIN\r\n\t\t\tSET @CorrectAnswerId = @ExistCorrectAnswerId;\r\n\t\t\tSELECT t1.Id FROM QuestionsAndCorrectAnswers AS t1 \r\n\t\t\t\tWHERE  t1.QuestionId=@QuestionId AND t1.CorrectAnswerId=@CorrectAnswerId INTO @Id;\r\n\r\n\t\t\tIF @Id='empty' THEN \r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tINSERT INTO QuestionsAndCorrectAnswers (Id, QuestionId, CorrectAnswerId)\r\n\t\t\t\t\tVALUES (UUID(), @QuestionId, @CorrectAnswerId);\r\n\t\t\t\tEND;\r\n\t\t\tELSE\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tSET @TextMessage = @TextMessage + '. QuestionsAndCorrectAnswers found for QuestionId='+ @QuestionId + ' CorrectAnswerId=' + @CorrectAnswerId;\r\n                END;\r\n\t\t\tEND IF;\r\n        END;\r\n    END IF;\r\n    \r\n    SET Message = @TextMessage;\r\n    COMMIT;\r\nEND");

        public static OperationBuilder<SqlOperation> get_CorrectAnswersWithQuestionByTitleRu(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `get_CorrectAnswersWithQuestionByTitleRu`(\r\nin titleRu varchar(500)\r\n)\r\nBEGIN\r\n\tSELECT \r\n        t3.Id as QuestionId,\r\n        t3.TitleRu as QuestionTitleRu,\r\n        t1.Id as CorrectAnswerId,\r\n        t1.TitleRu as CorrectAnswerRu,\r\n        t2.id as QuestionsAndCorrectAnswersId\r\n\tFROM CorrectAnswers as t1\r\n\t\tleft join QuestionsAndCorrectAnswers as t2 on t1.id=t2.CorrectAnswerId\r\n\t\tleft join Questions as t3 on t3.id=t2.QuestionId\r\n\twhere t1.TitleRu in (titleRu);\r\nEND");

        public static OperationBuilder<SqlOperation> get_QuestionsByCategoryId(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `get_QuestionsByCategoryId`(\r\n\tIN CategoryId varchar(255)\r\n)\r\nBEGIN\r\n\tSELECT t1.* FROM Questions t1\r\n\tinner join CategoryAndQuestions t2 on t1.id = t2.QuestionId\r\n\twhere t2.CategoryId=CategoryId;\r\nEND");

        public static OperationBuilder<SqlOperation> get_questionWithCorrectAnswers(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `get_questionWithCorrectAnswers`(\r\nin titleRu varchar(500)\r\n)\r\nBEGIN\r\n\tSELECT \r\n\t\tt1.TitleRu as QuestionTitleRu,\r\n\t\tt3.TitleRu as CorrectAnswerRu\r\nFROM Questions as t1\r\n\tleft join QuestionsAndCorrectAnswers as t2 on t1.id=t2.QuestionId\r\n    left join CorrectAnswers as t3 on t3.id=t2.CorrectAnswerId\r\nwhere t1.TitleRu in (titleRu);\r\nEND");

        public static OperationBuilder<SqlOperation> get_QuestionWithCorrectAnswersByTitleRu(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `get_QuestionWithCorrectAnswersByTitleRu`(\r\nin titleRu varchar(500)\r\n)\r\nBEGIN\r\n\tSELECT \r\n        t1.Id as QuestionId,\r\n        t1.TitleRu,\r\n        t3.Id as CorrectAnswerId,\r\n        t3.TitleRu,\r\n        t2.id as QuestionsAndCorrectAnswersId\r\n\tFROM Questions as t1\r\n\t\tleft join QuestionsAndCorrectAnswers as t2 on t1.id=t2.QuestionId\r\n\t\tleft join CorrectAnswers as t3 on t3.id=t2.CorrectAnswerId\r\n\twhere t1.TitleRu in (titleRu);\r\nEND");

        public static OperationBuilder<SqlOperation> GetAnswers(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `GetAnswers`(\r\n\tIN TestId  varchar(255),\r\n    IN TypeTestId  varchar(255),\r\n    IN QuestionsId varchar(255),\r\n    IN IsTerm int,\r\n    IN CategoryId varchar(255),\r\n\tIN CountAnswers INT,\r\n\tIN NumberQuestion INT)\r\nBEGIN\r\n\tDECLARE Count_incorrect_answers INT;\r\n\tSTART TRANSACTION;\r\n    \r\n    CREATE TEMPORARY TABLE IF NOT EXISTS ListIds (\r\n\t\tId varchar(255)\r\n    );\r\n    \r\n\tCREATE TEMPORARY TABLE  IF NOT EXISTS ListQuestionIds(\r\n\t\tId varchar(255)\r\n\t);\r\n        \r\n\tCREATE TEMPORARY TABLE IF NOT EXISTS Result(\r\n\t\tId varchar(255),\r\n\t\tQuestionId varchar(255),\r\n\t\tTitleEn varchar(500),\r\n\t\tTitleEs varchar(500),\r\n\t\tTitleRu varchar(500),\r\n\t\tCreaterId varchar(255),\r\n\t\tApproverId varchar(255),\r\n\t\tRand_number decimal,\r\n        IsTerm int\r\n\t);\r\n    \r\n    \r\n\tCREATE TEMPORARY TABLE  IF NOT EXISTS CorrectAnswerListRecord(\r\n\t\tId varchar(255),\r\n\t\tQuestionId varchar(255),\r\n\t\tTitleEn varchar(500),\r\n\t\tTitleEs varchar(500),\r\n\t\tTitleRu varchar(500),\r\n\t\tCreaterId varchar(255),\r\n\t\tApproverId varchar(255),\r\n\t\tRand_number decimal,\r\n        IsTerm int\r\n\t);\r\n\r\n\tCREATE TEMPORARY TABLE  IF NOT EXISTS IncorrectAnswerListRecord(\r\n\t\tId varchar(255),\r\n\t\tQuestionId varchar(255),\r\n\t\tTitleEn varchar(500),\r\n\t\tTitleEs varchar(500),\r\n\t\tTitleRu varchar(500),\r\n\t\tCreaterId varchar(255),\r\n\t\tApproverId varchar(255),\r\n\t\tRand_number decimal,\r\n        IsTerm int\r\n\t);\r\n    \r\n\tCREATE TEMPORARY TABLE  IF NOT EXISTS IncorrectAnswerListRecord2(\r\n\t\tId varchar(255),\r\n\t\tQuestionId varchar(255),\r\n\t\tTitleEn varchar(500),\r\n\t\tTitleEs varchar(500),\r\n\t\tTitleRu varchar(500),\r\n\t\tCreaterId varchar(255),\r\n\t\tApproverId varchar(255),\r\n\t\tRand_number decimal,\r\n        IsTerm int\r\n\t);\r\n    \r\n\tINSERT INTO CorrectAnswerListRecord\r\n\t\tSELECT \r\n\t\t\tt1.Id, \r\n\t\t\tt2.QuestionId, \r\n\t\t\tTitleEn,\r\n\t\t\tTitleEs,\r\n\t\t\tTitleRu,\r\n\t\t\tCreaterId,\r\n\t\t\tApproverId,\r\n\t\t\trand()*1000,\r\n            t1.IsTerm\r\n\t\t\tFROM CorrectAnswers AS t1\r\n\t\t\tINNER JOIN QuestionsAndCorrectAnswers AS t2 ON t1.Id = t2.CorrectAnswerId\r\n\t\tWHERE t2.QuestionId = QuestionsId;\r\n        \r\n    SELECT t1.IsTerm FROM CorrectAnswerListRecord as t1 limit 1 into @TypeAnswer;\r\n    \r\n    IF ((TypeTestId='7b4da4cf-52b5-4c78-9834-b56e9dbe491a') OR (TypeTestId='9f8fb08c-0074-4860-8a95-6f49ab6bf5ac'))  THEN \r\n\t\tBEGIN\r\n\t\t\tINSERT INTO ListIds\r\n\t\t\tWITH RECURSIVE _listIds (Id) AS\r\n\t\t\t(\r\n\t\t\t  SELECT Id\r\n\t\t\t\tFROM Categories\r\n\t\t\t\tWHERE ParentId=CategoryId\r\n\t\t\t  UNION ALL\r\n\t\t\t  SELECT T1.Id\r\n\t\t\t\tFROM _listIds AS p JOIN Categories AS T1\r\n\t\t\t\t  ON p.Id = T1.ParentId\r\n\t\t\t)\r\n            SELECT * FROM _listIds;\r\n            \r\n\t\t\tINSERT INTO ListQuestionIds\r\n\t\t\t\tSELECT t1.Id FROM Questions as t1\r\n\t\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id = t2.QuestionId\r\n\t\t\t\tWHERE t2.CategoryId IN (SELECT Id FROM ListIds);\r\n\t\tEND;\r\n    ELSE\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO ListQuestionIds\r\n\t\t\t\tSELECT t1.Id FROM Questions as t1\r\n\t\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id = t2.QuestionId\r\n\t\t\t\tWHERE t2.CategoryId = CategoryId;\r\n        END;\r\n\tEND IF;\r\n\r\n\tINSERT INTO IncorrectAnswerListRecord\r\n\t\tSELECT \r\n\t\t\tt1.Id, \r\n\t\t\tt2.QuestionId, \r\n\t\t\tTitleEn,\r\n\t\t\tTitleEs,\r\n\t\t\tTitleRu,\r\n\t\t\tCreaterId,\r\n\t\t\tApproverId,\r\n\t\t\trand()*1000,\r\n            t1.IsTerm\r\n\t\t\tFROM IncorrectAnswers AS t1\r\n\t\t\tINNER JOIN QuestionsAndIncorrectAnswers AS t2 ON t1.Id = t2.IncorrectAnswerId\r\n\t\tWHERE t2.QuestionId = QuestionsId and t1.isTerm=@TypeAnswer;\r\n\r\n\tINSERT INTO Result \r\n\t\tSELECT * FROM CorrectAnswerListRecord ORDER BY Rand_number LIMIT 3;\r\n\r\n\tIF !((TestId='') OR (TestId IS NULL))  THEN \r\n\t\tBEGIN\r\n\t\t\tINSERT INTO TestCorrectAnswers \r\n\t\t\t\tSELECT UUID(), TestId, QuestionId, NumberQuestion, Id FROM Result;\t\r\n        END;\r\n    End IF;\r\n    \r\n\tSELECT COUNT(*) FROM Result INTO @RESULT_COUNT;\r\n    SELECT COUNT(*) FROM IncorrectAnswerListRecord INTO @INCORRECT_COUNT;\r\n    \r\n\tIF (@INCORRECT_COUNT > 0) THEN \r\n\t\tBEGIN\r\n\t\t\tSET Count_incorrect_answers = CountAnswers - @RESULT_COUNT;\r\n            \r\n\t\t\tINSERT INTO Result\r\n\t\t\t\tSELECT * FROM IncorrectAnswerListRecord ORDER BY Rand_number LIMIT Count_incorrect_answers;\r\n\t\tEND;\r\n\tEND IF;\r\n\r\n\tSELECT COUNT(*) FROM Result INTO @RESULT_COUNT2;\r\n    \r\n\tIF (@RESULT_COUNT2 < CountAnswers) THEN \r\n\t\tBEGIN\r\n\t\t\tDELETE FROM IncorrectAnswerListRecord;\r\n             \r\n            INSERT INTO IncorrectAnswerListRecord\r\n\t\t\tSELECT \r\n\t\t\t\tt1.Id, \r\n\t\t\t\tt2.QuestionId, \r\n\t\t\t\tTitleEn,\r\n\t\t\t\tTitleEs,\r\n\t\t\t\tTitleRu,\r\n\t\t\t\tCreaterId,\r\n\t\t\t\tApproverId,\r\n\t\t\t\trand()*1000,\r\n                t1.IsTerm\r\n\t\t\t\tFROM CorrectAnswers AS t1\r\n\t\t\t\tINNER JOIN QuestionsAndCorrectAnswers AS t2 ON t1.Id = t2.CorrectAnswerId\r\n\t\t\tWHERE t2.QuestionId <> QuestionsId and t2.QuestionId in (select Id from ListQuestionIds) and t1.IsTerm=@TypeAnswer and \r\n            t1.TitleEn not in (select TitleEn from Result);\r\n            \r\n\t\t\t/*NEED ADD CONDITION BY LANGUAGE*/\r\n            INSERT INTO IncorrectAnswerListRecord2\r\n            SELECT *\r\n\t\t\t\tFROM IncorrectAnswerListRecord\r\n\t\t\t\tGROUP BY TitleEn\r\n\t\t\t\tHAVING COUNT(TitleEn) > 1;\r\n            \r\n            DELETE FROM IncorrectAnswerListRecord\r\n\t\t\t\tWHERE TitleEn\r\n\t\t\t\tIN (SELECT TitleEn\r\n\t\t\t\tFROM IncorrectAnswerListRecord2);\r\n                \r\n\t\t\tINSERT IncorrectAnswerListRecord\r\n\t\t\tSELECT *\r\n\t\t\tFROM IncorrectAnswerListRecord2;\r\n            \r\n            SET Count_incorrect_answers = CountAnswers - @RESULT_COUNT2;\r\n              \r\n\t\t\tINSERT INTO Result\r\n\t\t\t\tSELECT Id, QuestionId, TitleEn, TitleEs, TitleRu, CreaterId, ApproverId, Rand_number, t1.IsTerm FROM IncorrectAnswerListRecord as t1 ORDER BY Rand_number LIMIT Count_incorrect_answers;\r\n\t\t\tdrop table IncorrectAnswerListRecord2;\r\n            \r\n\t\tEND;\r\n\tEND IF;\r\n    \r\n\tSELECT Id, QuestionId, TitleEn, TitleEs, TitleRu, CreaterId, ApproverId, IsTerm  FROM Result ORDER BY Rand_number;\r\n    \r\n    delete from Result where id<>'';\r\n    delete from ListIds where id<>'';\r\n    delete from ListQuestionIds where id<>'';\r\n    delete from CorrectAnswerListRecord where id<>'';\r\n    delete from IncorrectAnswerListRecord where id<>'';\r\n\tCOMMIT;\r\nEND");

        public static OperationBuilder<SqlOperation> GetNextQuestionForTest(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `GetNextQuestionForTest`(\r\n    IN TestId  varchar(255),\r\n    IN CategoryId varchar(255))\r\nBEGIN\r\n\tSTART TRANSACTION;\r\n\r\n    CREATE TEMPORARY TABLE IF NOT EXISTS ListIds (\r\n\t\tId varchar(255)\r\n    );\r\n    \r\n    CREATE TEMPORARY TABLE IF NOT EXISTS ListTestQuestionIds (\r\n\t\tId varchar(255)\r\n    );\r\n    \r\n    CREATE TEMPORARY TABLE IF NOT EXISTS NextQuestionRecord(\r\n\t   Id varchar(255),\r\n       IsTerm boolean,\r\n\t   CategoryId varchar(255),\r\n       KeyS3 varchar(50),\r\n       ExpiredSignedUrlS3 datetime(6),\r\n       SignedUrlS3 varchar(1000),\r\n       TitleEn varchar(500),\r\n       TitleEs varchar(500),\r\n       TitleRu varchar(500),\r\n       ProofUrlEn varchar(1000),\r\n       ProofUrlEs varchar(1000),\r\n       ProofUrlRu varchar(1000),\r\n       ProofCRCEn varchar(100),\r\n       ProofCRCEs varchar(100),\r\n       ProofCRCRu varchar(100),\r\n       CreaterId varchar(255),\r\n       ApproverId varchar(255),\r\n       Rand_number decimal\r\n\t);\r\n    \r\n    INSERT INTO ListTestQuestionIds\r\n        SELECT QuestionsId FROM TestQuestions t1 WHERE t1.TestId = TestId ;\r\n\r\n    SELECT TypeTestId FROM Tests WHERE Id = TestId INTO @TypeTestId;\r\n    \r\n\tIF ((@TypeTestId='7b4da4cf-52b5-4c78-9834-b56e9dbe491a') OR (@TypeTestId='9f8fb08c-0074-4860-8a95-6f49ab6bf5ac'))  THEN \r\n\t\tBEGIN\r\n\t\t\tINSERT INTO ListIds\r\n\t\t\tWITH RECURSIVE _listIds (Id) AS\r\n\t\t\t(\r\n\t\t\t  SELECT Id\r\n\t\t\t\tFROM Categories\r\n\t\t\t\tWHERE ParentId=CategoryId\r\n\t\t\t  UNION ALL\r\n\t\t\t  SELECT T1.Id\r\n\t\t\t\tFROM _listIds AS p JOIN Categories AS T1\r\n\t\t\t\t  ON p.Id = T1.ParentId\r\n\t\t\t)\r\n            SELECT * FROM _listIds;\r\n            \r\n            INSERT INTO NextQuestionRecord\r\n\t\t\tSELECT t1.Id, t1.IsTerm, CategoryId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, \r\n\t\t\t\t\tProofUrlRu, ProofCRCEn, ProofCRCEs, ProofCRCRu, CreaterId, ApproverId, rand()\r\n\t\t\tFROM Questions AS t1\r\n\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id=t2.QuestionId\r\n                WHERE t2.CategoryId IN (SELECT Id FROM ListIds) AND t1.Id not in (SELECT Id FROM ListTestQuestionIds);\t\r\n        END;\r\n\tELSE\r\n\t\tBEGIN\r\n            INSERT INTO NextQuestionRecord\r\n\t\t\tSELECT t1.Id, t1.IsTerm, CategoryId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, \r\n\t\t\t\t\tProofUrlRu, ProofCRCEn, ProofCRCEs, ProofCRCRu, CreaterId, ApproverId, rand()\r\n\t\t\tFROM Questions AS t1\r\n\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id=t2.QuestionId\r\n                WHERE t2.CategoryId = CategoryId AND t1.Id not in (SELECT Id FROM ListTestQuestionIds);\t\r\n        END;\r\n    END IF;\r\n\r\n    INSERT INTO TestQuestions\r\n\t\t(`Id`,\r\n\t\t`TestId`,\r\n\t\t`QuestionsId`,\r\n\t\t`Created`,\r\n\t\t`Started`)\r\n    SELECT uuid(), TestId, Id, now(),now() FROM NextQuestionRecord ORDER BY Rand_number Limit 1;\r\n\r\n    SELECT\r\n\t\tId,\r\n\t\tCategoryId,\r\n\t\tKeyS3,\r\n\t\tExpiredSignedUrlS3,\r\n\t\tSignedUrlS3,\r\n\t\tTitleEn,\r\n\t\tTitleEs,\r\n\t\tTitleRu,\r\n\t\tProofUrlEn,\r\n\t\tProofUrlEs,\r\n\t\tProofUrlRu,\r\n\t\tProofCRCEn,\r\n\t\tProofCRCEs,\r\n\t\tProofCRCRu,\r\n\t\tCreaterId,\r\n        IsTerm FROM NextQuestionRecord ORDER BY Rand_number Limit 1;\r\n    \r\n    DELETE FROM ListIds;\r\n    DELETE FROM ListTestQuestionIds;\r\n    DELETE FROM NextQuestionRecord;\r\n    \r\n\tCOMMIT;\r\nEND");

        public static OperationBuilder<SqlOperation> setTypeCategory(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `setTypeCategory`(\r\n\tIN CategoryId varchar(255),\r\n    IN TypeCategory int\r\n)\r\nBEGIN\r\n\tUpdate Categories\r\n    Set CountQuestions = TypeCategory\r\n    Where Id=CategoryId;\r\nEND");

        public static OperationBuilder<SqlOperation> StartTest(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `StartTest`(\r\n\tIN TestId  varchar(255),\r\n\tIN TypeTestId varchar(255),\r\n\tIN UserId varchar(255),\r\n    IN CategoryId varchar(255),\r\n    IN CategoryName varchar(500),\r\n    IN CountQuestions int)\r\nBEGIN\r\n\tSTART TRANSACTION;\r\n    \r\n    CREATE TEMPORARY TABLE IF NOT EXISTS ListIds (\r\n\t\tId varchar(255)\r\n    );\r\n    \r\n    CREATE TEMPORARY TABLE IF NOT EXISTS firstQuestionsRecord(\r\n\t   Id varchar(255),\r\n       IsTerm boolean,\r\n\t   CategoryId varchar(255),\r\n       KeyS3 varchar(50),\r\n       ExpiredSignedUrlS3 datetime(6),\r\n       SignedUrlS3 varchar(1000),\r\n       TitleEn varchar(500),\r\n       TitleEs varchar(500),\r\n       TitleRu varchar(500),\r\n       ProofUrlEn varchar(1000),\r\n       ProofUrlEs varchar(1000),\r\n       ProofUrlRu varchar(1000),\r\n       ProofCRCEn varchar(100),\r\n       ProofCRCEs varchar(100),\r\n       ProofCRCRu varchar(100),\r\n       CreaterId varchar(255),\r\n       ApproverId varchar(255),\r\n       Rand_number decimal\r\n\t);\r\n    \r\n    INSERT INTO Tests\r\n\t\t(`Id`,\r\n\t\t`CategoryName`,\r\n\t\t`Created`,\r\n\t\t`Started`,\r\n\t\t`CountQuestions`,\r\n\t\t`Finished`,\r\n\t\t`UserId`,\r\n\t\t`CategoryId`,\r\n\t\t`TypeTestId`)\r\n\tVALUES\r\n\t\t(TestId,\r\n\t\tCategoryName,\r\n\t\tnow(),\r\n\t\tnow(),\r\n\t\tCountQuestions,\r\n        FALSE,\r\n\t\tUserId,\r\n\t\tCategoryId,\r\n\t\tTypeTestId);\r\n        \r\n\tIF (TypeTestId='7b4da4cf-52b5-4c78-9834-b56e9dbe491a') OR (TypeTestId='9f8fb08c-0074-4860-8a95-6f49ab6bf5ac')  THEN \r\n\t\tBEGIN\r\n\t\t\tINSERT INTO ListIds\r\n\t\t\tWITH RECURSIVE _listIds (Id) AS\r\n\t\t\t(\r\n\t\t\t  SELECT Id\r\n\t\t\t\tFROM Categories\r\n\t\t\t\tWHERE ParentId=CategoryId\r\n\t\t\t  UNION ALL\r\n\t\t\t  SELECT T1.Id\r\n\t\t\t\tFROM _listIds AS p JOIN Categories AS T1\r\n\t\t\t\t  ON p.Id = T1.ParentId\r\n\t\t\t)\r\n            SELECT * FROM _listIds;\r\n            \r\n            INSERT INTO firstQuestionsRecord\r\n\t\t\tSELECT t1.Id, t1.IsTerm, CategoryId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, \r\n\t\t\t\t\tProofUrlRu, ProofCRCEn, ProofCRCEs, ProofCRCRu, CreaterId, ApproverId, rand()\r\n\t\t\tFROM Questions AS t1\r\n\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id=t2.QuestionId\r\n                WHERE t2.CategoryId IN (SELECT Id FROM ListIds);\r\n        END;\r\n    ELSE\r\n\t\tBEGIN\r\n            INSERT INTO firstQuestionsRecord\r\n\t\t\tSELECT t1.Id, t1.IsTerm, CategoryId, KeyS3, ExpiredSignedUrlS3, SignedUrlS3, TitleEn, TitleEs, TitleRu, ProofUrlEn, ProofUrlEs, \r\n\t\t\t\t\tProofUrlRu, ProofCRCEn, ProofCRCEs, ProofCRCRu, CreaterId, ApproverId, rand()\r\n\t\t\tFROM Questions AS t1\r\n\t\t\t\tINNER JOIN CategoryAndQuestions AS t2 ON t1.Id=t2.QuestionId\r\n                WHERE t2.CategoryId = CategoryId;\r\n        END;\r\n    END IF;\r\n    \r\n    INSERT INTO TestQuestions\r\n\t\t(`Id`,\r\n\t\t`TestId`,\r\n\t\t`QuestionsId`,\r\n\t\t`Created`,\r\n\t\t`Started`)\r\n    SELECT uuid(), TestId, Id, now(),now() FROM firstQuestionsRecord ORDER BY Rand_number Limit 1;\r\n    \r\n    SELECT\r\n\t\tId,\r\n\t\tCategoryId,\r\n\t\tKeyS3,\r\n\t\tExpiredSignedUrlS3,\r\n\t\tSignedUrlS3,\r\n\t\tTitleEn,\r\n\t\tTitleEs,\r\n\t\tTitleRu,\r\n\t\tProofUrlEn,\r\n\t\tProofUrlEs,\r\n\t\tProofUrlRu,\r\n\t\tProofCRCEn,\r\n\t\tProofCRCEs,\r\n\t\tProofCRCRu,\r\n\t\tCreaterId,\r\n        IsTerm FROM firstQuestionsRecord ORDER BY Rand_number Limit 1;\r\n    \r\n    DELETE FROM ListIds;\r\n    DELETE FROM firstQuestionsRecord;\r\n    \r\n    COMMIT;\r\nEND");

        public static OperationBuilder<SqlOperation> UpdateExpiredSignedUrlS3InQuestion(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `UpdateExpiredSignedUrlS3InQuestion`(\r\n\tIN QuestionId varchar(255),\r\n    IN ExpiredSignedUrlS3 datetime,\r\n\tIN SignedUrlS3 varchar(1000)\r\n)\r\nBEGIN\r\n\tUPDATE Questions\r\n\tSET ExpiredSignedUrlS3=ExpiredSignedUrlS3, SignedUrlS3=SignedUrlS3 \r\n\tWHERE Id=QuestionId;\r\nEND");

        public static OperationBuilder<SqlOperation> updateTerm_QuestionWithCorrectAnswersByQuestionTitleRu(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `updateTerm_QuestionWithCorrectAnswersByQuestionTitleRu`(\r\nin titleRu varchar(500),\r\nin term int\r\n)\r\nBEGIN\r\n\tSELECT \r\n\t\tt1.TitleRu as QuestionTitleRu,\r\n\t\tt3.TitleRu as CorrectAnswerRu,\r\n        t1.Id as QuestionId,\r\n        t3.Id as CorrectAnswerId\r\n\tFROM Questions as t1\r\n\t\tleft join QuestionsAndCorrectAnswers as t2 on t1.id=t2.QuestionId\r\n\t\tleft join CorrectAnswers as t3 on t3.id=t2.CorrectAnswerId\r\n\twhere t1.TitleRu in (titleRu) into \r\n\t@QuestionTitleRu,\r\n\t@CorrectAnswerRu,\r\n\t@QuestionId,\r\n\t@CorrectAnswerId;\r\n\r\n\r\nupdate Questions \r\nset isterm=term\r\nwhere id=@QuestionId;\r\n\r\nupdate CorrectAnswers \r\nset isterm=term\r\nwhere id=@CorrectAnswerId;\r\n\r\nselect isterm, t.* from Questions t where id=@QuestionId;\r\nselect isterm, t.* from CorrectAnswers t where id=@CorrectAnswerId;\r\n\r\nEND");
        public static OperationBuilder<SqlOperation> сopy_CategoriesByParentId(
            this MigrationBuilder migrationBuilder)
            => migrationBuilder.Sql($"CREATE PROCEDURE `сopy_CategoriesByParentId`(\r\n\tin from_parentId varchar(255),\r\n\tin to_parentId varchar(255))\r\nBEGIN\r\n\tinsert into `db-prod`.Categories \r\n\tSELECT uuid(),\r\n\t   to_parentId,\r\n\t\t`Categories`.`NameEn`,\r\n\t\t`Categories`.`NameEs`,\r\n\t\t`Categories`.`NameRu`,\r\n\t\t`Categories`.`DescriptionEn`,\r\n\t\t`Categories`.`DescriptionEs`,\r\n\t\t`Categories`.`DescriptionRu`,\r\n\t\t`Categories`.`CreaterId`,\r\n\t\t`Categories`.`OrderBy`,\r\n\t\t`Categories`.`CountQuestions`,\r\n\t\t`Categories`.`Hidden`\r\n\tFROM `db-prod`.`Categories`\r\n\twhere ParentId=from_parentId;\r\nEND");
    }
}
